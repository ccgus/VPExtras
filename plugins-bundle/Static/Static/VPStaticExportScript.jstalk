/*
 Note: the staticSetup variable that's passed into each method is a mutable
 dictionary, which you can refer to in your scriptlet pages.  You can put your
 own values in here as well to use later on.
*/

function staticSetupConfiguration(document, staticSetup) {
    staticSetup['siteName']        = "My Blog's Name";
    staticSetup['siteURL']         = "http://example.com/wherever/";
    staticSetup['frontPageCount']  = "4";
    staticSetup['copyright']       = "2012 Your Name Here";
    staticSetup['rssSiteDescription'] = "This is my blog, there are many like it but this one is mine.";
    staticSetup['viewLocalWhenFinished'] = true;
}

function staticExportWillBegin(document, staticSetup) {
    
}

function staticExportDidEnd(document, staticSetup) {
    
}

function staticExportItemWillBegin(document, item, staticSetup) {
    
}

function staticExportDidRenderHTMLForItem(document, item, renderedHTMLMutableString, staticSetup) {
    
    // We can create our own custom macros here:
    var macros = {
        '$vp$': '<a href="http://flyingmeat.com/voodoopad/">VoodooPad</a>',
        '$fm$': '<a href="http://flyingmeat.com/">Flying Meat</a>',
    }
    
    for (key in macros) {
        var value = macros[key];
        [renderedHTMLMutableString replaceOccurrencesOfString:key withString:value options:NSCaseInsensitiveSearch range:NSMakeRange(0, [renderedHTMLMutableString length])];
    }
}


function staticExportWillAppendItemToFrontPage(document, item, frontPageMutableString, staticSetup) {
    
}

function staticExportDidAppendItemToFrontPage(document, item, frontPageMutableString, staticSetup) {
    
}

function staticExportArchivePathForItem(document, item, fileName, staticSetup) {
    var pubDate = null;

    // if there is a pubdate set in the Page Meta, use it for the publish date
    var pubDateStr = [item metaValueForKey:"pubdate"];
    if (pubDateStr)
    {
        var parser = [[NSDateFormatter alloc] init];
        [parser setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
        pubDate = [parser dateFromString:pubDateStr];
        // if the date couldn't be parsed, pubDate will remain null
        [parser release];
    }

    // fall back to the item's createdDate
    if (pubDate == null)
    {
        pubDate = [item createdDate];
    }
    
    var components = [[NSCalendar currentCalendar] components:NSMonthCalendarUnit | NSYearCalendarUnit fromDate:pubDate];
    
    var year  = [components year];
    var month = [components month];
    
    return "archives/" + year + "/" + month + "/" + fileName;
}

function staticExportArchivePathForAssetItem(document, item, fileName, staticSetup) {
    return "assets/" + fileName;
}


/*
 Use this function to return a list of pages (as an array) that you want written out at the root of the export directory.
 */
function staticSupportPages(document, staticSetup) {
    //return ["about", "contact"]
    return [];
}
